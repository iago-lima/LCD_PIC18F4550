

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue May 23 12:07:37 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18  0000                     
    19                           ; Version 1.41
    20                           ; Generated 25/01/2017 GMT
    21                           ; 
    22                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F4550 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     _PORTE	set	3972
    54  0000                     _TRISE	set	3990
    55  0000                     _TRISD	set	3989
    56  0000                     _PORTD	set	3971
    57  0000                     _PORTEbits	set	3972
    58                           
    59                           	psect	smallconst
    60  000800                     __psmallconst:
    61                           	opt stack 0
    62  000800  00                 	db	0
    63  000801                     STR_1:
    64  000801  49                 	db	73	;'I'
    65  000802  61                 	db	97	;'a'
    66  000803  67                 	db	103	;'g'
    67  000804  6F                 	db	111	;'o'
    68  000805  20                 	db	32
    69  000806  4C                 	db	76	;'L'
    70  000807  69                 	db	105	;'i'
    71  000808  6D                 	db	109	;'m'
    72  000809  61                 	db	97	;'a'
    73  00080A  00                 	db	0
    74  0000                     
    75                           ; #config settings
    76  00080B  00                 	db	0	; dummy byte at the end
    77  0000                     
    78                           	psect	cinit
    79  000972                     __pcinit:
    80                           	opt stack 0
    81  000972                     start_initialization:
    82                           	opt stack 0
    83  000972                     __initialization:
    84                           	opt stack 0
    85                           
    86                           ; Clear objects allocated to COMRAM (4 bytes)
    87  000972  6A0D               	clrf	(__pbssCOMRAM+3)& (0+255),c
    88  000974  6A0C               	clrf	(__pbssCOMRAM+2)& (0+255),c
    89  000976  6A0B               	clrf	(__pbssCOMRAM+1)& (0+255),c
    90  000978  6A0A               	clrf	__pbssCOMRAM& (0+255),c
    91  00097A                     end_of_initialization:
    92                           	opt stack 0
    93  00097A                     __end_of__initialization:
    94                           	opt stack 0
    95  00097A  0E00               	movlw	low (__Lsmallconst shr (0+16))
    96  00097C  6EF8               	movwf	tblptru,c
    97  00097E  0E08               	movlw	high __Lsmallconst
    98  000980  6EF7               	movwf	tblptrh,c
    99  000982  0100               	movlb	0
   100  000984  EF52  F004         	goto	_main	;jump to C main() function
   101                           tblptru	equ	0xFF8
   102                           tblptrh	equ	0xFF7
   103                           
   104                           	psect	bssCOMRAM
   105  00000A                     __pbssCOMRAM:
   106                           	opt stack 0
   107  00000A                     _b:
   108                           	opt stack 0
   109  00000A                     	ds	2
   110  00000C                     _a:
   111                           	opt stack 0
   112  00000C                     	ds	2
   113                           tblptru	equ	0xFF8
   114                           tblptrh	equ	0xFF7
   115                           
   116                           	psect	cstackCOMRAM
   117  000001                     __pcstackCOMRAM:
   118                           	opt stack 0
   119  000001                     ??_enable:
   120  000001                     
   121                           ; 1 bytes @ 0x0
   122  000001                     	ds	1
   123  000002                     ??_writeChar:
   124  000002                     sendCMD@value:
   125                           	opt stack 0
   126                           
   127                           ; 2 bytes @ 0x1
   128  000002                     	ds	1
   129  000003                     writeChar@value:
   130                           	opt stack 0
   131                           
   132                           ; 1 bytes @ 0x2
   133  000003                     	ds	1
   134  000004                     ??_sendCMD:
   135  000004                     writeLCD@a:
   136                           	opt stack 0
   137                           
   138                           ; 2 bytes @ 0x3
   139  000004                     	ds	1
   140  000005                     ??_initLCD:
   141  000005                     setLine@a:
   142                           	opt stack 0
   143                           
   144                           ; 2 bytes @ 0x4
   145  000005                     	ds	1
   146  000006                     ??_writeLCD:
   147                           
   148                           ; 1 bytes @ 0x5
   149  000006                     	ds	1
   150  000007                     setLine@b:
   151                           	opt stack 0
   152                           
   153                           ; 2 bytes @ 0x6
   154  000007                     	ds	1
   155  000008                     writeLCD@i:
   156                           	opt stack 0
   157                           
   158                           ; 2 bytes @ 0x7
   159  000008                     	ds	1
   160  000009                     
   161                           ; 1 bytes @ 0x8
   162  000009                     	ds	1
   163  00000A                     tblptru	equ	0xFF8
   164                           tblptrh	equ	0xFF7
   165                           
   166                           ; 1 bytes @ 0x9
   167 ;;
   168 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   169 ;;
   170 ;; *************** function _main *****************
   171 ;; Defined at:
   172 ;;		line 127 in file "main.c"
   173 ;; Parameters:    Size  Location     Type
   174 ;;		None
   175 ;; Auto vars:     Size  Location     Type
   176 ;;		None
   177 ;; Return value:  Size  Location     Type
   178 ;;                  1    wreg      void 
   179 ;; Registers used:
   180 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   181 ;; Tracked objects:
   182 ;;		On entry : 0/0
   183 ;;		On exit  : 0/0
   184 ;;		Unchanged: 0/0
   185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   186 ;;      Params:         0       0       0       0       0       0       0       0       0
   187 ;;      Locals:         0       0       0       0       0       0       0       0       0
   188 ;;      Temps:          0       0       0       0       0       0       0       0       0
   189 ;;      Totals:         0       0       0       0       0       0       0       0       0
   190 ;;Total ram usage:        0 bytes
   191 ;; Hardware stack levels required when called:    3
   192 ;; This function calls:
   193 ;;		_initLCD
   194 ;;		_setLine
   195 ;;		_writeLCD
   196 ;; This function is called by:
   197 ;;		Startup code after reset
   198 ;; This function uses a non-reentrant model
   199 ;;
   200                           
   201                           	psect	text0
   202  0008A4                     __ptext0:
   203                           	opt stack 0
   204  0008A4                     _main:
   205                           	opt stack 28
   206                           
   207                           ;main.c: 128: TRISD = 0x00;
   208                           
   209                           ;incstack = 0
   210  0008A4  0E00               	movlw	0
   211  0008A6  6E95               	movwf	3989,c	;volatile
   212                           
   213                           ;main.c: 129: TRISE = 0x00;
   214  0008A8  0E00               	movlw	0
   215  0008AA  6E96               	movwf	3990,c	;volatile
   216                           
   217                           ;main.c: 131: PORTE = 0x00;
   218  0008AC  0E00               	movlw	0
   219  0008AE  6E84               	movwf	3972,c	;volatile
   220                           
   221                           ;main.c: 133: initLCD();
   222  0008B0  EC06  F004         	call	_initLCD	;wreg free
   223                           
   224                           ;main.c: 134: writeLCD("Iago Lima");
   225  0008B4  0E01               	movlw	low STR_1
   226  0008B6  6E04               	movwf	writeLCD@a,c
   227  0008B8  0E08               	movlw	high STR_1
   228  0008BA  6E05               	movwf	writeLCD@a+1,c
   229  0008BC  EC2D  F004         	call	_writeLCD	;wreg free
   230                           
   231                           ;main.c: 135: setLine(0,2);
   232  0008C0  0E00               	movlw	0
   233  0008C2  6E06               	movwf	setLine@a+1,c
   234  0008C4  0E00               	movlw	0
   235  0008C6  6E05               	movwf	setLine@a,c
   236  0008C8  0E00               	movlw	0
   237  0008CA  6E08               	movwf	setLine@b+1,c
   238  0008CC  0E02               	movlw	2
   239  0008CE  6E07               	movwf	setLine@b,c
   240  0008D0  EC71  F004         	call	_setLine	;wreg free
   241                           
   242                           ;main.c: 136: writeLCD("Iago Lima");
   243  0008D4  0E01               	movlw	low STR_1
   244  0008D6  6E04               	movwf	writeLCD@a,c
   245  0008D8  0E08               	movlw	high STR_1
   246  0008DA  6E05               	movwf	writeLCD@a+1,c
   247  0008DC  EC2D  F004         	call	_writeLCD	;wreg free
   248  0008E0                     l42:
   249  0008E0  D7FF               	goto	l42
   250  0008E2                     __end_of_main:
   251                           	opt stack 0
   252                           tblptru	equ	0xFF8
   253                           tblptrh	equ	0xFF7
   254                           
   255 ;; *************** function _writeLCD *****************
   256 ;; Defined at:
   257 ;;		line 120 in file "main.c"
   258 ;; Parameters:    Size  Location     Type
   259 ;;  a               2    3[COMRAM] PTR unsigned char 
   260 ;;		 -> STR_2(10), STR_1(10), 
   261 ;; Auto vars:     Size  Location     Type
   262 ;;  i               2    7[COMRAM] int 
   263 ;; Return value:  Size  Location     Type
   264 ;;                  1    wreg      void 
   265 ;; Registers used:
   266 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : 0/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   272 ;;      Params:         2       0       0       0       0       0       0       0       0
   273 ;;      Locals:         2       0       0       0       0       0       0       0       0
   274 ;;      Temps:          2       0       0       0       0       0       0       0       0
   275 ;;      Totals:         6       0       0       0       0       0       0       0       0
   276 ;;Total ram usage:        6 bytes
   277 ;; Hardware stack levels used:    1
   278 ;; Hardware stack levels required when called:    2
   279 ;; This function calls:
   280 ;;		_writeChar
   281 ;; This function is called by:
   282 ;;		_main
   283 ;; This function uses a non-reentrant model
   284 ;;
   285                           
   286                           	psect	text1
   287  00085A                     __ptext1:
   288                           	opt stack 0
   289  00085A                     _writeLCD:
   290                           	opt stack 28
   291                           
   292                           ;main.c: 121: int i = 0;
   293                           
   294                           ;incstack = 0
   295  00085A  0E00               	movlw	0
   296  00085C  6E09               	movwf	writeLCD@i+1,c
   297  00085E  0E00               	movlw	0
   298  000860  6E08               	movwf	writeLCD@i,c
   299                           
   300                           ;main.c: 122: for(;a[i] != '\0';i++)
   301  000862  D010               	goto	l731
   302  000864                     l727:
   303                           
   304                           ;main.c: 123: writeChar(a[i]);
   305  000864  5008               	movf	writeLCD@i,w,c
   306  000866  2404               	addwf	writeLCD@a,w,c
   307  000868  6E06               	movwf	??_writeLCD& (0+255),c
   308  00086A  5009               	movf	writeLCD@i+1,w,c
   309  00086C  2005               	addwfc	writeLCD@a+1,w,c
   310  00086E  6E07               	movwf	(??_writeLCD+1)& (0+255),c
   311  000870  C006  FFF6         	movff	??_writeLCD,tblptrl
   312  000874  C007  FFF7         	movff	??_writeLCD+1,tblptrh
   313  000878                     	if	0	;tblptru may be non-zero
   314  000878                     	endif
   315  000878                     	if	0	;tblptru may be non-zero
   316  000878                     	endif
   317  000878  0008               	tblrd		*
   318  00087A  50F5               	movf	tablat,w,c
   319  00087C  EC9B  F004         	call	_writeChar
   320  000880  4A08               	infsnz	writeLCD@i,f,c
   321  000882  2A09               	incf	writeLCD@i+1,f,c
   322  000884                     l731:
   323  000884  5008               	movf	writeLCD@i,w,c
   324  000886  2404               	addwf	writeLCD@a,w,c
   325  000888  6E06               	movwf	??_writeLCD& (0+255),c
   326  00088A  5009               	movf	writeLCD@i+1,w,c
   327  00088C  2005               	addwfc	writeLCD@a+1,w,c
   328  00088E  6E07               	movwf	(??_writeLCD+1)& (0+255),c
   329  000890  C006  FFF6         	movff	??_writeLCD,tblptrl
   330  000894  C007  FFF7         	movff	??_writeLCD+1,tblptrh
   331  000898                     	if	0	;tblptru may be non-zero
   332  000898                     	endif
   333  000898                     	if	0	;tblptru may be non-zero
   334  000898                     	endif
   335  000898  0008               	tblrd		*
   336  00089A  50F5               	movf	tablat,w,c
   337  00089C  0900               	iorlw	0
   338  00089E  B4D8               	btfsc	status,2,c
   339  0008A0  0012               	return	
   340  0008A2  D7E0               	goto	l727
   341  0008A4                     __end_of_writeLCD:
   342                           	opt stack 0
   343                           tblptru	equ	0xFF8
   344                           tblptrh	equ	0xFF7
   345                           tblptrl	equ	0xFF6
   346                           tablat	equ	0xFF5
   347                           status	equ	0xFD8
   348                           
   349 ;; *************** function _writeChar *****************
   350 ;; Defined at:
   351 ;;		line 111 in file "main.c"
   352 ;; Parameters:    Size  Location     Type
   353 ;;  value           1    wreg     unsigned char 
   354 ;; Auto vars:     Size  Location     Type
   355 ;;  value           1    2[COMRAM] unsigned char 
   356 ;; Return value:  Size  Location     Type
   357 ;;                  1    wreg      void 
   358 ;; Registers used:
   359 ;;		wreg, cstack
   360 ;; Tracked objects:
   361 ;;		On entry : 0/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   365 ;;      Params:         0       0       0       0       0       0       0       0       0
   366 ;;      Locals:         1       0       0       0       0       0       0       0       0
   367 ;;      Temps:          1       0       0       0       0       0       0       0       0
   368 ;;      Totals:         2       0       0       0       0       0       0       0       0
   369 ;;Total ram usage:        2 bytes
   370 ;; Hardware stack levels used:    1
   371 ;; Hardware stack levels required when called:    1
   372 ;; This function calls:
   373 ;;		_enable
   374 ;; This function is called by:
   375 ;;		_writeLCD
   376 ;; This function uses a non-reentrant model
   377 ;;
   378                           
   379                           	psect	text2
   380  000936                     __ptext2:
   381                           	opt stack 0
   382  000936                     _writeChar:
   383                           	opt stack 28
   384                           
   385                           ;incstack = 0
   386                           ;writeChar@value stored from wreg
   387  000936  6E03               	movwf	writeChar@value,c
   388                           
   389                           ;main.c: 112: PORTEbits.RE2 = 1;
   390  000938  8484               	bsf	3972,2,c	;volatile
   391                           
   392                           ;main.c: 113: PORTD = value;
   393  00093A  C003  FF83         	movff	writeChar@value,3971	;volatile
   394                           
   395                           ;main.c: 114: enable();
   396  00093E  EC88  F004         	call	_enable	;wreg free
   397                           
   398                           ;main.c: 115: _delay((unsigned long)((10)*(8000000/4000.0)));
   399  000942  0E1A               	movlw	26
   400  000944  6E02               	movwf	??_writeChar& (0+255),c
   401  000946  0EF8               	movlw	248
   402  000948                     u57:
   403  000948  2EE8               	decfsz	wreg,f,c
   404  00094A  D7FE               	bra	u57
   405  00094C  2E02               	decfsz	??_writeChar& (0+255),f,c
   406  00094E  D7FC               	bra	u57
   407  000950  D000               	nop2	
   408                           
   409                           ;main.c: 116: PORTEbits.RE2 = 0;
   410  000952  9484               	bcf	3972,2,c	;volatile
   411  000954  0012               	return		;funcret
   412  000956                     __end_of_writeChar:
   413                           	opt stack 0
   414                           tblptru	equ	0xFF8
   415                           tblptrh	equ	0xFF7
   416                           tblptrl	equ	0xFF6
   417                           tablat	equ	0xFF5
   418                           wreg	equ	0xFE8
   419                           status	equ	0xFD8
   420                           
   421 ;; *************** function _setLine *****************
   422 ;; Defined at:
   423 ;;		line 94 in file "main.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;  a               2    4[COMRAM] int 
   426 ;;  b               2    6[COMRAM] int 
   427 ;; Auto vars:     Size  Location     Type
   428 ;;		None
   429 ;; Return value:  Size  Location     Type
   430 ;;                  1    wreg      void 
   431 ;; Registers used:
   432 ;;		wreg, status,2, status,0, cstack
   433 ;; Tracked objects:
   434 ;;		On entry : 0/0
   435 ;;		On exit  : 0/0
   436 ;;		Unchanged: 0/0
   437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   438 ;;      Params:         4       0       0       0       0       0       0       0       0
   439 ;;      Locals:         0       0       0       0       0       0       0       0       0
   440 ;;      Temps:          0       0       0       0       0       0       0       0       0
   441 ;;      Totals:         4       0       0       0       0       0       0       0       0
   442 ;;Total ram usage:        4 bytes
   443 ;; Hardware stack levels used:    1
   444 ;; Hardware stack levels required when called:    2
   445 ;; This function calls:
   446 ;;		_sendCMD
   447 ;; This function is called by:
   448 ;;		_main
   449 ;; This function uses a non-reentrant model
   450 ;;
   451                           
   452                           	psect	text3
   453  0008E2                     __ptext3:
   454                           	opt stack 0
   455  0008E2                     _setLine:
   456                           	opt stack 28
   457                           
   458                           ;main.c: 95: if(b == 2)
   459                           
   460                           ;incstack = 0
   461  0008E2  0E02               	movlw	2
   462  0008E4  1807               	xorwf	setLine@b,w,c
   463  0008E6  1008               	iorwf	setLine@b+1,w,c
   464  0008E8  A4D8               	btfss	status,2,c
   465  0008EA  D009               	goto	l719
   466                           
   467                           ;main.c: 96: sendCMD(0xC0 + a);
   468  0008EC  0EC0               	movlw	192
   469  0008EE  2405               	addwf	setLine@a,w,c
   470  0008F0  6E02               	movwf	sendCMD@value,c
   471  0008F2  0E00               	movlw	0
   472  0008F4  2006               	addwfc	setLine@a+1,w,c
   473  0008F6  6E03               	movwf	sendCMD@value+1,c
   474  0008F8  ECAB  F004         	call	_sendCMD	;wreg free
   475  0008FC  0012               	return	
   476  0008FE                     l719:
   477                           
   478                           ;main.c: 97: else
   479                           ;main.c: 98: sendCMD(0x80 + a);
   480  0008FE  0E80               	movlw	128
   481  000900  2405               	addwf	setLine@a,w,c
   482  000902  6E02               	movwf	sendCMD@value,c
   483  000904  0E00               	movlw	0
   484  000906  2006               	addwfc	setLine@a+1,w,c
   485  000908  6E03               	movwf	sendCMD@value+1,c
   486  00090A  ECAB  F004         	call	_sendCMD	;wreg free
   487  00090E  0012               	return	
   488  000910                     __end_of_setLine:
   489                           	opt stack 0
   490                           tblptru	equ	0xFF8
   491                           tblptrh	equ	0xFF7
   492                           tblptrl	equ	0xFF6
   493                           tablat	equ	0xFF5
   494                           wreg	equ	0xFE8
   495                           status	equ	0xFD8
   496                           
   497 ;; *************** function _initLCD *****************
   498 ;; Defined at:
   499 ;;		line 101 in file "main.c"
   500 ;; Parameters:    Size  Location     Type
   501 ;;		None
   502 ;; Auto vars:     Size  Location     Type
   503 ;;		None
   504 ;; Return value:  Size  Location     Type
   505 ;;                  1    wreg      void 
   506 ;; Registers used:
   507 ;;		wreg, status,2, cstack
   508 ;; Tracked objects:
   509 ;;		On entry : 0/0
   510 ;;		On exit  : 0/0
   511 ;;		Unchanged: 0/0
   512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   513 ;;      Params:         0       0       0       0       0       0       0       0       0
   514 ;;      Locals:         0       0       0       0       0       0       0       0       0
   515 ;;      Temps:          1       0       0       0       0       0       0       0       0
   516 ;;      Totals:         1       0       0       0       0       0       0       0       0
   517 ;;Total ram usage:        1 bytes
   518 ;; Hardware stack levels used:    1
   519 ;; Hardware stack levels required when called:    2
   520 ;; This function calls:
   521 ;;		_sendCMD
   522 ;; This function is called by:
   523 ;;		_main
   524 ;; This function uses a non-reentrant model
   525 ;;
   526                           
   527                           	psect	text4
   528  00080C                     __ptext4:
   529                           	opt stack 0
   530  00080C                     _initLCD:
   531                           	opt stack 28
   532                           
   533                           ;main.c: 102: sendCMD(0x01);
   534                           
   535                           ;incstack = 0
   536  00080C  0E00               	movlw	0
   537  00080E  6E03               	movwf	sendCMD@value+1,c
   538  000810  0E01               	movlw	1
   539  000812  6E02               	movwf	sendCMD@value,c
   540  000814  ECAB  F004         	call	_sendCMD	;wreg free
   541                           
   542                           ;main.c: 103: sendCMD(0x38);
   543  000818  0E00               	movlw	0
   544  00081A  6E03               	movwf	sendCMD@value+1,c
   545  00081C  0E38               	movlw	56
   546  00081E  6E02               	movwf	sendCMD@value,c
   547  000820  ECAB  F004         	call	_sendCMD	;wreg free
   548                           
   549                           ;main.c: 104: sendCMD(0x80);
   550  000824  0E00               	movlw	0
   551  000826  6E03               	movwf	sendCMD@value+1,c
   552  000828  0E80               	movlw	128
   553  00082A  6E02               	movwf	sendCMD@value,c
   554  00082C  ECAB  F004         	call	_sendCMD	;wreg free
   555                           
   556                           ;main.c: 105: sendCMD(0xf);
   557  000830  0E00               	movlw	0
   558  000832  6E03               	movwf	sendCMD@value+1,c
   559  000834  0E0F               	movlw	15
   560  000836  6E02               	movwf	sendCMD@value,c
   561  000838  ECAB  F004         	call	_sendCMD	;wreg free
   562                           
   563                           ;main.c: 106: sendCMD(0x01);
   564  00083C  0E00               	movlw	0
   565  00083E  6E03               	movwf	sendCMD@value+1,c
   566  000840  0E01               	movlw	1
   567  000842  6E02               	movwf	sendCMD@value,c
   568  000844  ECAB  F004         	call	_sendCMD	;wreg free
   569                           
   570                           ;main.c: 107: _delay((unsigned long)((10)*(8000000/4000.0)));
   571  000848  0E1A               	movlw	26
   572  00084A  6E05               	movwf	??_initLCD& (0+255),c
   573  00084C  0EF8               	movlw	248
   574  00084E                     u67:
   575  00084E  2EE8               	decfsz	wreg,f,c
   576  000850  D7FE               	bra	u67
   577  000852  2E05               	decfsz	??_initLCD& (0+255),f,c
   578  000854  D7FC               	bra	u67
   579  000856  D000               	nop2	
   580  000858  0012               	return		;funcret
   581  00085A                     __end_of_initLCD:
   582                           	opt stack 0
   583                           tblptru	equ	0xFF8
   584                           tblptrh	equ	0xFF7
   585                           tblptrl	equ	0xFF6
   586                           tablat	equ	0xFF5
   587                           wreg	equ	0xFE8
   588                           status	equ	0xFD8
   589                           
   590 ;; *************** function _sendCMD *****************
   591 ;; Defined at:
   592 ;;		line 87 in file "main.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;  value           2    1[COMRAM] int 
   595 ;; Auto vars:     Size  Location     Type
   596 ;;		None
   597 ;; Return value:  Size  Location     Type
   598 ;;                  1    wreg      void 
   599 ;; Registers used:
   600 ;;		wreg, cstack
   601 ;; Tracked objects:
   602 ;;		On entry : 0/0
   603 ;;		On exit  : 0/0
   604 ;;		Unchanged: 0/0
   605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   606 ;;      Params:         2       0       0       0       0       0       0       0       0
   607 ;;      Locals:         0       0       0       0       0       0       0       0       0
   608 ;;      Temps:          1       0       0       0       0       0       0       0       0
   609 ;;      Totals:         3       0       0       0       0       0       0       0       0
   610 ;;Total ram usage:        3 bytes
   611 ;; Hardware stack levels used:    1
   612 ;; Hardware stack levels required when called:    1
   613 ;; This function calls:
   614 ;;		_enable
   615 ;; This function is called by:
   616 ;;		_setLine
   617 ;;		_initLCD
   618 ;; This function uses a non-reentrant model
   619 ;;
   620                           
   621                           	psect	text5
   622  000956                     __ptext5:
   623                           	opt stack 0
   624  000956                     _sendCMD:
   625                           	opt stack 28
   626                           
   627                           ;main.c: 88: PORTEbits.RE2 = 0;
   628                           
   629                           ;incstack = 0
   630  000956  9484               	bcf	3972,2,c	;volatile
   631                           
   632                           ;main.c: 89: PORTD = value;
   633  000958  C002  FF83         	movff	sendCMD@value,3971	;volatile
   634                           
   635                           ;main.c: 90: enable();
   636  00095C  EC88  F004         	call	_enable	;wreg free
   637                           
   638                           ;main.c: 91: _delay((unsigned long)((10)*(8000000/4000.0)));
   639  000960  0E1A               	movlw	26
   640  000962  6E04               	movwf	??_sendCMD& (0+255),c
   641  000964  0EF8               	movlw	248
   642  000966                     u77:
   643  000966  2EE8               	decfsz	wreg,f,c
   644  000968  D7FE               	bra	u77
   645  00096A  2E04               	decfsz	??_sendCMD& (0+255),f,c
   646  00096C  D7FC               	bra	u77
   647  00096E  D000               	nop2	
   648  000970  0012               	return		;funcret
   649  000972                     __end_of_sendCMD:
   650                           	opt stack 0
   651                           tblptru	equ	0xFF8
   652                           tblptrh	equ	0xFF7
   653                           tblptrl	equ	0xFF6
   654                           tablat	equ	0xFF5
   655                           wreg	equ	0xFE8
   656                           status	equ	0xFD8
   657                           
   658 ;; *************** function _enable *****************
   659 ;; Defined at:
   660 ;;		line 80 in file "main.c"
   661 ;; Parameters:    Size  Location     Type
   662 ;;		None
   663 ;; Auto vars:     Size  Location     Type
   664 ;;		None
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   674 ;;      Params:         0       0       0       0       0       0       0       0       0
   675 ;;      Locals:         0       0       0       0       0       0       0       0       0
   676 ;;      Temps:          1       0       0       0       0       0       0       0       0
   677 ;;      Totals:         1       0       0       0       0       0       0       0       0
   678 ;;Total ram usage:        1 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; This function calls:
   681 ;;		Nothing
   682 ;; This function is called by:
   683 ;;		_sendCMD
   684 ;;		_writeChar
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text6
   689  000910                     __ptext6:
   690                           	opt stack 0
   691  000910                     _enable:
   692                           	opt stack 28
   693                           
   694                           ;main.c: 81: PORTEbits.RE1=1;
   695                           
   696                           ;incstack = 0
   697  000910  8284               	bsf	3972,1,c	;volatile
   698                           
   699                           ;main.c: 82: _delay((unsigned long)((10)*(8000000/4000.0)));
   700  000912  0E1A               	movlw	26
   701  000914  6E01               	movwf	??_enable& (0+255),c
   702  000916  0EF8               	movlw	248
   703  000918                     u87:
   704  000918  2EE8               	decfsz	wreg,f,c
   705  00091A  D7FE               	bra	u87
   706  00091C  2E01               	decfsz	??_enable& (0+255),f,c
   707  00091E  D7FC               	bra	u87
   708  000920  D000               	nop2	
   709                           
   710                           ;main.c: 83: PORTEbits.RE1=0;
   711  000922  9284               	bcf	3972,1,c	;volatile
   712                           
   713                           ;main.c: 84: _delay((unsigned long)((10)*(8000000/4000.0)));
   714  000924  0E1A               	movlw	26
   715  000926  6E01               	movwf	??_enable& (0+255),c
   716  000928  0EF8               	movlw	248
   717  00092A                     u97:
   718  00092A  2EE8               	decfsz	wreg,f,c
   719  00092C  D7FE               	bra	u97
   720  00092E  2E01               	decfsz	??_enable& (0+255),f,c
   721  000930  D7FC               	bra	u97
   722  000932  D000               	nop2	
   723  000934  0012               	return		;funcret
   724  000936                     __end_of_enable:
   725                           	opt stack 0
   726                           tblptru	equ	0xFF8
   727                           tblptrh	equ	0xFF7
   728                           tblptrl	equ	0xFF6
   729                           tablat	equ	0xFF5
   730                           wreg	equ	0xFE8
   731                           status	equ	0xFD8
   732                           tblptru	equ	0xFF8
   733                           tblptrh	equ	0xFF7
   734                           tblptrl	equ	0xFF6
   735                           tablat	equ	0xFF5
   736                           wreg	equ	0xFE8
   737                           status	equ	0xFD8
   738                           
   739                           	psect	rparam
   740  0000                     tblptru	equ	0xFF8
   741                           tblptrh	equ	0xFF7
   742                           tblptrl	equ	0xFF6
   743                           tablat	equ	0xFF5
   744                           wreg	equ	0xFE8
   745                           status	equ	0xFD8


Data Sizes:
    Strings     10
    Constant    0
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      9      13
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    writeLCD@a	PTR unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[10]), 


Critical Paths under _main in COMRAM

    _main->_writeLCD
    _writeLCD->_writeChar
    _writeChar->_enable
    _setLine->_sendCMD
    _initLCD->_sendCMD
    _sendCMD->_enable

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1367
                            _initLCD
                            _setLine
                           _writeLCD
 ---------------------------------------------------------------------------------
 (1) _writeLCD                                             6     4      2     233
                                              3 COMRAM     6     4      2
                          _writeChar
 ---------------------------------------------------------------------------------
 (2) _writeChar                                            2     2      0      15
                                              1 COMRAM     2     2      0
                             _enable
 ---------------------------------------------------------------------------------
 (1) _setLine                                              4     0      4     664
                                              4 COMRAM     4     0      4
                            _sendCMD
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     470
                                              4 COMRAM     1     1      0
                            _sendCMD
 ---------------------------------------------------------------------------------
 (2) _sendCMD                                              3     1      2     470
                                              1 COMRAM     3     1      2
                             _enable
 ---------------------------------------------------------------------------------
 (3) _enable                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _sendCMD
       _enable
   _setLine
     _sendCMD
       _enable
   _writeLCD
     _writeChar
       _enable

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      9       D       1       13.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       D      20        0.0%
DATA                 0      0       D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue May 23 12:07:37 2017

                      _a 000C                        _b 000A                       l42 08E0  
                     u57 0948                       u67 084E                       u77 0966  
                     u87 0918                       u97 092A              __CFG_BOR$ON 000000  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000  
                    l731 0884                      l719 08FE                      l727 0864  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      wreg 000FE8  
           __CFG_FOSC$HS 000000             __CFG_WDT$OFF 000000                     STR_1 0801  
                   STR_2 0801                     _main 08A4                     start 0000  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
          __CFG_PLLDIV$1 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  _PORTD 000F83                    _PORTE 000F84            __CFG_USBDIV$1 000000  
                  _TRISD 000F95                    _TRISE 000F96            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_initLCD 085A           __CFG_EBTRB$OFF 000000          __end_of_sendCMD 0972  
        __end_of_setLine 0910                    tablat 000FF5                    status 000FD8  
         __CFG_ICPRT$OFF 000000           __CFG_PBADEN$ON 000000          __initialization 0972  
           __end_of_main 08E2                   ??_main 000A            __activetblptr 000001  
         __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000                   _enable 0910  
              ??_initLCD 0005                ??_sendCMD 0004                ??_setLine 0009  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8         __end_of_writeLCD 08A4               __accesstop 0060  
__end_of__initialization 097A            ___rparam_used 000001           __pcstackCOMRAM 0001  
                ?_enable 0001          __CFG_VREGEN$OFF 000000       __size_of_writeChar 0020  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0800  
        __size_of_enable 0026                  __pcinit 0972                  __ramtop 0800  
              ?_writeLCD 0004                  __ptext0 08A4                  __ptext1 085A  
                __ptext2 0936                  __ptext3 08E2                  __ptext4 080C  
                __ptext5 0956                  __ptext6 0910                  _initLCD 080C  
                _sendCMD 0956                  _setLine 08E2     end_of_initialization 097A  
             ??_writeLCD 0006                _PORTEbits 000F84        __end_of_writeChar 0956  
           sendCMD@value 0002           __end_of_enable 0936      start_initialization 0972  
               ??_enable 0001         __CFG_LPT1OSC$OFF 000000              __pbssCOMRAM 000A  
               ?_initLCD 0001              __smallconst 0800        __size_of_writeLCD 004A  
               ?_sendCMD 0002                 ?_setLine 0005         __CFG_WDTPS$32768 000000  
              _writeChar 0936                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0800         __size_of_initLCD 004E         __size_of_sendCMD 001C  
       __size_of_setLine 002E               ?_writeChar 0001           writeChar@value 0003  
          __size_of_main 003E                 _writeLCD 085A    __CFG_CPUDIV$OSC1_PLL2 000000  
               setLine@a 0005                 setLine@b 0007                writeLCD@a 0004  
              writeLCD@i 0008              ??_writeChar 0002  
